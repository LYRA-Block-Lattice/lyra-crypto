export default class BlockchainAPI {
    private static networkid;
    static setNetworkId: (id: string) => void;
    static InitAxios: () => void;
    static Block_API_v1: import("axios").AxiosInstance;
    static Block_API_v2: import("axios").AxiosInstance;
    static Dealer_API: import("axios").AxiosInstance;
    static Start_API: import("axios").AxiosInstance;
    static getBlockExplorerUrl: (id: string) => string;
    static getLastServiceBlock: () => Promise<import("axios").AxiosResponse<any, any>>;
    static sendTransfer: (sendBlock: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static recvTransfer: (receiveBlock: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static recvTransferWithOpenAccount: (openReceiveBlock: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static mintToken: (tokenBlock: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static getUnreceived: (accountId: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static findFiatWallet: (owner: string, symbol: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static getHistory: (accountId: string, start: Date, end: Date, count: number) => Promise<import("axios").AxiosResponse<any, any>>;
    static searchDao: (q: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static GetLastBlock: (accountId: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static getTradeForOrder: (orderId: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static lastServiceHash: () => Promise<import("axios").AxiosResponse<any, any>>;
    static getBalance: (accountId: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static fetchOrders: (catalog: string | undefined) => Promise<import("axios").AxiosResponse<any, any>>;
    static fetchOrderById: (orderId: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static fetchOrdersByOwner: (owner: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static fetchTradesByOwner: (owner: string) => Promise<import("axios").AxiosResponse<any, any>>;
    static fetchDealer: () => Promise<import("axios").AxiosResponse<any, any>>;
    static uploadFile: (formData: FormData) => Promise<import("axios").AxiosResponse<any, any>>;
    static createNFTMeta: (accountId: string, signature: string, name: string, description: string, imgUrl: string) => Promise<import("axios").AxiosResponse<any, any>>;
    receiveTransfer(finalJson: string): void;
    getUnreceivedBlocks(accountId: string): void;
}
